import * as React from 'react';

import { styled } from '@mui/system';
import Paper from '@mui/material/Paper';
import Button from '@mui/material/Button';
import Popover from '@mui/material/Popover';
import Typography from '@mui/material/Typography';
import { Input as BaseInput } from '@mui/base/Input';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import Divider from '@mui/material/Divider';
import ListItemText from '@mui/material/ListItemText';
import ListItemAvatar from '@mui/material/ListItemAvatar';
import Avatar from '@mui/material/Avatar';

export function AlignItemsList() {
  return (
    <List
      sx={{
        display: 'flex',
        width: '100%',
        bgcolor: 'background.paper',
      }}
    >
      <ListItem
        sx={{
          flex: '1 1 auto',
          alignItems: 'flex-start',
          flexDirection: 'row',  // Make ListItem layout horizontal
          margin: '0 8px', // Add some margin between items
        }}
      >
        <ListItemAvatar>
          <Avatar alt="Remy Sharp" src="/assets/images/avatars/avatar_7.jpg" />
        </ListItemAvatar>
        <ListItemText
          primary="SQL Injection Exploiter"
          secondary={
            <React.Fragment>
              <Typography
                sx={{ display: 'inline' }}
                component="span"
                variant="body2"
                color="text.primary"
              >
                
              </Typography>
              {"Identify SQL injection vulnerabilities in your web application."}
            </React.Fragment>
          }
        />
      </ListItem>
      <Divider orientation="vertical" flexItem />
      <ListItem
        sx={{
          flex: '1 1 auto',
          alignItems: 'flex-start',
          flexDirection: 'row',  // Make ListItem layout horizontal
          margin: '0 8px', // Add some margin between items
        }}
      >
        <ListItemAvatar>
          <Avatar alt="Travis Howard" src="/assets/images/avatars/avatar_8.jpg" />
        </ListItemAvatar>
        <ListItemText
          primary="headers-security scanner"
          secondary={
            <React.Fragment>
              <Typography
                sx={{ display: 'inline' }}
                component="span"
                variant="body2"
                color="text.primary"
              >
              </Typography>
              {"Analyze the HTTP headers of a target web application."}
            </React.Fragment>
          }
        />
      </ListItem>
      <Divider orientation="vertical" flexItem />
      <ListItem 
        sx={{
          flex: '1 1 auto',
          alignItems: 'flex-start',
          flexDirection: 'row',  // Make ListItem layout horizontal
          margin: '0 8px', // Add some margin between items
        }}
      >
        <ListItemAvatar>
          <Avatar alt="Cindy Baker" src="/assets/images/avatars/avatar_9.jpg" />
        </ListItemAvatar>
        <ListItemText
          primary="XSS Vulnerability Scan"
          secondary={
            <React.Fragment>
              <Typography
                sx={{ display: 'inline' }}
                component="span"
                variant="body2"
                color="text.primary"
              >
              </Typography>
              {'Detect  Cross-Site Scripting (XSS) vulnerabilities within web applications.'}
            </React.Fragment>
          }
        />
      </ListItem>
    </List>
  );
}


const blue = {
  100: '#DAECFF',
  200: '#b6daff',
};

const grey = {
  50: '#F3F6F9',
  100: '#E5EAF2',
  200: '#DAE2ED',
};

const InputElement = styled('input')(
  ({ theme }) => `
  width: 480px; // increased width
  font-family: 'IBM Plex Sans', sans-serif;
  font-size: 1.2rem; // increased font size
  font-weight: 400;
  line-height: 1.5;
  padding: 12px 16px; // increased padding
  border-radius: 8px;
  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};
  background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};
  border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};
  box-shadow: 0px 2px 4px ${
    theme.palette.mode === 'dark' ? 'rgba(0,0,0, 0.5)' : 'rgba(0,0,0, 0.05)'
  };

  &:hover {
    border-color: ${blue[400]};
  }

  &:focus {
    border-color: ${blue[400]};
    box-shadow: 0 0 0 3px ${theme.palette.mode === 'dark' ? blue[600] : blue[200]};
  }

  // firefox
  &:focus-visible {
    outline: 0;
  }
`,
);

const InfoIcon = () => (
  <img src="https://static-00.iconduck.com/assets.00/info-icon-2048x2048-tcgtx810.png" alt="info" width="20" height="20" />
);

const InputWithPopover = React.forwardRef((props, ref) => {
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [value, setValue] = React.useState('');

  const handlePopoverOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handlePopoverClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);

  return (
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <BaseInput slots={{ input: InputElement }} value={value} onChange={(event) => setValue(event.target.value)} {...props} ref={ref} />
      <div onMouseEnter={handlePopoverOpen} onMouseLeave={handlePopoverClose}>
        <InfoIcon />
      </div>
      <Popover
        id="mouse-over-popover"
        sx={{ pointerEvents: 'none' }}
        open={open}
        anchorEl={anchorEl}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}
        transformOrigin={{ vertical: 'top', horizontal: 'left' }}
        onClose={handlePopoverClose}
        disableRestoreFocus
      >
        <Typography sx={{ p: 1 }}>To initiate your scan, please enter the URL of the target website or server in the provided field below.</Typography>
      </Popover>
    </div>
  );
});

const Rectangle = styled('div')`
  background-color: #E3FAFC ;
  padding: 20px;
  margin-top: 20px;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const StartScanButton = styled(Button)`
  background-color: #0C8599;
  color: white;
  &:hover {
    background-color: #005f73;
  }
`;

function UnstyledInputIntroduction() {
  return (
    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: '100px' }}>
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
        <span style={{ marginRight: '1em', fontSize: '1.2em', color: '#1F1F1F' }}>Target:</span>
        <InputWithPopover aria-label="Demo input" placeholder="Target URL......" />
      </div>
      <Rectangle>
        <Typography variant="body1">
          By starting this scan, you confirm authorization to scan the target and accept our terms of service.
        </Typography>
        <StartScanButton variant="contained" style={{ marginTop: '10px' }}>
          Start Scan
        </StartScanButton>
      </Rectangle>
    </div>
  );
}

const FullWidthRectangle = styled('div')`
  background-color: #EFF8FF;
  padding: 20px;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  height: 100%;
`;
function ToolDocumentation() {
  return (
    <FullWidthRectangle>
      <Paper sx={{ p: 3, width: '80%', maxWidth: 800, mb: 3 }}>
        <Typography variant="h3" gutterBottom>
        Target Exploitation Toolkit Documentation
        </Typography>
        <Typography variant="h4">
          Introduction
        </Typography>
        <Typography variant="body1" sx={{ fontSize: '1.1rem' }} paragraph>
        The Target Exploitation Toolkit is a powerful suite designed to help you identify and exploit vulnerabilities in your systems, websites, and web applications. This toolkit includes tools for SQL Injection exploitation, headers security scanning, and XSS vulnerability scanning to ensure a thorough assessment of your security posture.
        </Typography>
        <Typography variant="h4">
          How to Use
        </Typography>
        <Typography variant="body1" sx={{ fontSize: '1.1rem' }} paragraph>
          1.Input Target: Enter the URL of the target system you wish to scan.<br />
          2.Start Scan: Click the &quot;Start Scan&quot; button to initiate the scanning process.<br />
          3.Review Results: Once the scan is complete, the tool will present a detailed analysis of identified vulnerabilities.<br />
          4.Security Recommendations: Analyze the scan results to identify areas for improvement and implement recommended actions to enhance your security posture.
        </Typography>
        <Typography variant="h4">
          Understanding Results
        </Typography>
        After the scan is complete, the toolkit provides a comprehensive report detailing the identified vulnerabilities:
        <Typography variant="body1" sx={{ fontSize: '1.1rem' }} paragraph>
        <span style={{ textDecoration: 'underline' }}>  SQL Injection Exploiter:</span>
        Identifies and exploits SQL Injection vulnerabilities in web applications, allowing you to understand the extent of the potential impact.<br />
        <span style={{ textDecoration: 'underline' }}> Headers-Security Scanner:</span>
        Scans HTTP headers for security-related misconfigurations and missing security headers, providing insights into how to improve header security.<br />
        <span style={{ textDecoration: 'underline' }}> XSS Vulnerability Scanner:</span>
        Identifies cross-site scripting (XSS) vulnerabilities in web applications, providing details on how these vulnerabilities can be exploited .<br />
        </Typography>
        <Typography variant="h4">
        Tips for Using Target Exploitation Toolkit
        </Typography>
        <Typography variant="body1" sx={{ fontSize: '1.1rem' }} paragraph>
        <span style={{ textDecoration: 'underline' }}>Perform Regular Scans:</span>
        Schedule regular scans to keep track of any new vulnerabilities or changes in your environment. Regular use of the toolkit helps you detect new vulnerabilities and unauthorized changes, ensuring ongoing protection.<br />
         <span style={{ textDecoration: 'underline' }}>Analyze and Interpret Results Thoroughly</span> 
         Carefully review the comprehensive scan results:<br />
         •Understand the severity and potential impact of each vulnerability.<br />
         •Identify which components are affected.<br />
         •Prioritize remediation efforts based on severity and impact.<br />
         <span style={{ textDecoration: 'underline' }}>Prioritize High-Risk Findings:</span> 
         Address the most critical vulnerabilities first. High-severity issues, such as exploitable SQL injections and significant misconfigurations, should be mitigated promptly to enhance security.<br />
         <span style={{ textDecoration: 'underline' }}>Validate and Act on Findings:</span>
         After identifying vulnerabilities, validate their presence and impact. Follow the recommended remediation steps provided in the scan results to effectively mitigate these vulnerabilities.<br />
         <span style={{ textDecoration: 'underline' }}>Adhere to Legal and Ethical Standards:</span>
          Ensure you have the necessary permissions to perform  scans  on the target system. Unauthorized scanning can result in legal consequences and potential disruption of services. Always operate within the legal and ethical boundaries.<br />
         <span style={{ textDecoration: 'underline' }}>Stay Updated on Security Trends:</span> 
         Security threats and vulnerabilities are constantly evolving. Stay informed about the latest security trends, vulnerabilities, and best practices.
        </Typography>
      </Paper>
    </FullWidthRectangle>
  );
}


function ExploitationPage() {
  return (
    <div>
      <h1 style={{ color: '#0C8599', textAlign: 'center', fontWeight: 'bold' }}>Welcome to our Target Exploitation Toolkit!</h1>
      <p style={{ color: '#000435', textAlign: 'center', fontSize: '1.5em', marginBottom: '2em' }}>Our tool helps you perform target exploitation, a crucial phase in assessing and understanding your system's vulnerabilities. </p>
      <AlignItemsList />
      <p style={{ color: '#000435', textAlign: 'center', fontSize: '1.5em' }}>Start your Scan </p>
      <UnstyledInputIntroduction />
      <ToolDocumentation />
      {/* Add more content here */}
    </div>
  );
}

export default ExploitationPage;


